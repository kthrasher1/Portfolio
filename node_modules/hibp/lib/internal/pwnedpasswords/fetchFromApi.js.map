{"version":3,"sources":["../../../src/internal/pwnedpasswords/fetchFromApi.js"],"names":["Promise","resolve","get","endpoint","then","res","data","catch","err","response","status","Error","statusText"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;eAWe;AAAA,SACbA,QAAQC,OAAR,CAAgB,uBAAMC,GAAN,CAAUC,QAAV,CAAhB,EACGC,IADH,CACQ;AAAA,WAAOC,IAAIC,IAAX;AAAA,GADR,EAEGC,KAFH,CAES,eAAO;AACZ,QAAIC,IAAIC,QAAR,EAAkB;AAChB,cAAQD,IAAIC,QAAJ,CAAaC,MAArB;AACE,aAAK,6BAAkBA,MAAvB;AACE,gBAAM,IAAIC,KAAJ,CAAUH,IAAIC,QAAJ,CAAaH,IAAvB,CAAN;;AACF;AACE,gBAAM,IAAIK,KAAJ,CAAUH,IAAIC,QAAJ,CAAaG,UAAvB,CAAN;AAJJ;AAMD,KAPD,MAOO;AACL,YAAMJ,GAAN;AACD;AACF,GAbH,CADa;AAAA,C","file":"fetchFromApi.js","sourcesContent":["import axios from './axiosInstance';\nimport { RANGE_BAD_REQUEST } from './responses';\n\n/**\n * Fetches data from the supplied API endpoint.\n *\n * HTTP status code 200 returns plain text (data found).\n * HTTP status code 400 throws an Error (bad request).\n *\n * @private\n * @param {string} endpoint the API endpoint to query\n * @returns {Promise} a Promise which resolves to the data resulting from the\n * query, or rejects with an Error\n */\nexport default endpoint =>\n  Promise.resolve(axios.get(endpoint))\n    .then(res => res.data)\n    .catch(err => {\n      if (err.response) {\n        switch (err.response.status) {\n          case RANGE_BAD_REQUEST.status:\n            throw new Error(err.response.data);\n          default:\n            throw new Error(err.response.statusText);\n        }\n      } else {\n        throw err;\n      }\n    });\n"]}